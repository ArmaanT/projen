{
  "tasks": {
    "clobber": {
      "name": "clobber",
      "category": "30.maintain",
      "description": "hard resets to HEAD of origin and cleans the local repo",
      "env": {
        "BRANCH": "$(git branch --show-current)"
      },
      "steps": [
        {
          "exec": "git checkout -b scratch",
          "name": "save current HEAD in \"scratch\" branch"
        },
        {
          "exec": "git checkout $BRANCH"
        },
        {
          "exec": "git fetch origin",
          "name": "fetch latest changes from origin"
        },
        {
          "exec": "git reset --hard origin/$BRANCH",
          "name": "hard reset to origin commit"
        },
        {
          "exec": "git clean -fdx",
          "name": "clean all untracked files"
        },
        {
          "say": "ready to rock! (unpushed commits are under the \"scratch\" branch)"
        }
      ],
      "condition": "git diff --exit-code > /dev/null"
    },
    "compile": {
      "name": "compile",
      "category": "00.build",
      "description": "Only compile",
      "steps": [
        {
          "exec": "jsii --silence-warnings=reserved-word --no-fix-peer-dependencies"
        },
        {
          "spawn": "docgen"
        }
      ]
    },
    "test:compile": {
      "name": "test:compile",
      "category": "10.test",
      "description": "compiles the test code",
      "steps": [
        {
          "exec": "tsc --noEmit --project tsconfig.jest.json"
        }
      ]
    },
    "test": {
      "name": "test",
      "category": "10.test",
      "description": "Run tests",
      "steps": [
        {
          "spawn": "test:compile"
        },
        {
          "parallel": [
            "test:deps.test.ts",
            "test:docker-compose.test.ts",
            "test:gitpod.test.ts",
            "test:ignore-file.test.ts",
            "test:integ.test.ts",
            "test:inventory.test.ts",
            "test:jest.test.ts",
            "test:json.test.ts",
            "test:makefile.test.ts",
            "test:new.test.ts",
            "test:node-package.test.ts",
            "test:node-project.test.ts",
            "test:pr-template.test.ts",
            "test:project.test.ts",
            "test:resolve.test.ts",
            "test:samplereadme.test.ts",
            "test:subproject.test.ts",
            "test:runtime.test.ts",
            "test:tasks.test.ts",
            "test:textfile.test.ts",
            "test:toml.test.ts",
            "test:util.test.ts",
            "test:vscode-launch-config.test.ts"
          ]
        },
        {
          "spawn": "eslint"
        }
      ]
    },
    "build": {
      "name": "build",
      "category": "00.build",
      "description": "Full release build (test+compile)",
      "steps": [
        {
          "spawn": "compile"
        },
        {
          "spawn": "test"
        },
        {
          "spawn": "package"
        },
        {
          "spawn": "readme-macros"
        }
      ]
    },
    "bump": {
      "name": "bump",
      "category": "20.release",
      "description": "Commits a bump to the package version based on conventional commits",
      "steps": [
        {
          "exec": "standard-version"
        }
      ],
      "condition": "! git log --oneline -1 | grep -q \"chore(release):\""
    },
    "release": {
      "name": "release",
      "category": "20.release",
      "description": "Bumps version & push to master",
      "steps": [
        {
          "spawn": "bump"
        },
        {
          "exec": "git push --follow-tags origin master"
        }
      ],
      "condition": "! git log --oneline -1 | grep -q \"chore(release):\""
    },
    "test:watch": {
      "name": "test:watch",
      "category": "10.test",
      "description": "Run jest in watch mode",
      "steps": [
        {
          "exec": "jest --watch"
        }
      ]
    },
    "test:update": {
      "name": "test:update",
      "category": "10.test",
      "description": "Update jest snapshots",
      "steps": [
        {
          "exec": "jest --updateSnapshot"
        }
      ]
    },
    "test:deps.test.ts": {
      "name": "test:deps.test.ts",
      "steps": [
        {
          "exec": "jest --passWithNoTests --all --updateSnapshot --no-coverage test/deps.test.ts"
        }
      ],
      "unlisted": true
    },
    "test:docker-compose.test.ts": {
      "name": "test:docker-compose.test.ts",
      "steps": [
        {
          "exec": "jest --passWithNoTests --all --updateSnapshot --no-coverage test/docker-compose.test.ts"
        }
      ],
      "unlisted": true
    },
    "test:gitpod.test.ts": {
      "name": "test:gitpod.test.ts",
      "steps": [
        {
          "exec": "jest --passWithNoTests --all --updateSnapshot --no-coverage test/gitpod.test.ts"
        }
      ],
      "unlisted": true
    },
    "test:ignore-file.test.ts": {
      "name": "test:ignore-file.test.ts",
      "steps": [
        {
          "exec": "jest --passWithNoTests --all --updateSnapshot --no-coverage test/ignore-file.test.ts"
        }
      ],
      "unlisted": true
    },
    "test:integ.test.ts": {
      "name": "test:integ.test.ts",
      "steps": [
        {
          "exec": "jest --passWithNoTests --all --updateSnapshot --no-coverage test/integ.test.ts"
        }
      ],
      "unlisted": true
    },
    "test:inventory.test.ts": {
      "name": "test:inventory.test.ts",
      "steps": [
        {
          "exec": "jest --passWithNoTests --all --updateSnapshot --no-coverage test/inventory.test.ts"
        }
      ],
      "unlisted": true
    },
    "test:jest.test.ts": {
      "name": "test:jest.test.ts",
      "steps": [
        {
          "exec": "jest --passWithNoTests --all --updateSnapshot --no-coverage test/jest.test.ts"
        }
      ],
      "unlisted": true
    },
    "test:json.test.ts": {
      "name": "test:json.test.ts",
      "steps": [
        {
          "exec": "jest --passWithNoTests --all --updateSnapshot --no-coverage test/json.test.ts"
        }
      ],
      "unlisted": true
    },
    "test:makefile.test.ts": {
      "name": "test:makefile.test.ts",
      "steps": [
        {
          "exec": "jest --passWithNoTests --all --updateSnapshot --no-coverage test/makefile.test.ts"
        }
      ],
      "unlisted": true
    },
    "test:new.test.ts": {
      "name": "test:new.test.ts",
      "steps": [
        {
          "exec": "jest --passWithNoTests --all --updateSnapshot --no-coverage test/new.test.ts"
        }
      ],
      "unlisted": true
    },
    "test:node-package.test.ts": {
      "name": "test:node-package.test.ts",
      "steps": [
        {
          "exec": "jest --passWithNoTests --all --updateSnapshot --no-coverage test/node-package.test.ts"
        }
      ],
      "unlisted": true
    },
    "test:node-project.test.ts": {
      "name": "test:node-project.test.ts",
      "steps": [
        {
          "exec": "jest --passWithNoTests --all --updateSnapshot --no-coverage test/node-project.test.ts"
        }
      ],
      "unlisted": true
    },
    "test:pr-template.test.ts": {
      "name": "test:pr-template.test.ts",
      "steps": [
        {
          "exec": "jest --passWithNoTests --all --updateSnapshot --no-coverage test/pr-template.test.ts"
        }
      ],
      "unlisted": true
    },
    "test:project.test.ts": {
      "name": "test:project.test.ts",
      "steps": [
        {
          "exec": "jest --passWithNoTests --all --updateSnapshot --no-coverage test/project.test.ts"
        }
      ],
      "unlisted": true
    },
    "test:resolve.test.ts": {
      "name": "test:resolve.test.ts",
      "steps": [
        {
          "exec": "jest --passWithNoTests --all --updateSnapshot --no-coverage test/resolve.test.ts"
        }
      ],
      "unlisted": true
    },
    "test:samplereadme.test.ts": {
      "name": "test:samplereadme.test.ts",
      "steps": [
        {
          "exec": "jest --passWithNoTests --all --updateSnapshot --no-coverage test/samplereadme.test.ts"
        }
      ],
      "unlisted": true
    },
    "test:subproject.test.ts": {
      "name": "test:subproject.test.ts",
      "steps": [
        {
          "exec": "jest --passWithNoTests --all --updateSnapshot --no-coverage test/subproject.test.ts"
        }
      ],
      "unlisted": true
    },
    "test:runtime.test.ts": {
      "name": "test:runtime.test.ts",
      "steps": [
        {
          "exec": "jest --passWithNoTests --all --updateSnapshot --no-coverage test/tasks/runtime.test.ts"
        }
      ],
      "unlisted": true
    },
    "test:tasks.test.ts": {
      "name": "test:tasks.test.ts",
      "steps": [
        {
          "exec": "jest --passWithNoTests --all --updateSnapshot --no-coverage test/tasks/tasks.test.ts"
        }
      ],
      "unlisted": true
    },
    "test:textfile.test.ts": {
      "name": "test:textfile.test.ts",
      "steps": [
        {
          "exec": "jest --passWithNoTests --all --updateSnapshot --no-coverage test/textfile.test.ts"
        }
      ],
      "unlisted": true
    },
    "test:toml.test.ts": {
      "name": "test:toml.test.ts",
      "steps": [
        {
          "exec": "jest --passWithNoTests --all --updateSnapshot --no-coverage test/toml.test.ts"
        }
      ],
      "unlisted": true
    },
    "test:util.test.ts": {
      "name": "test:util.test.ts",
      "steps": [
        {
          "exec": "jest --passWithNoTests --all --updateSnapshot --no-coverage test/util.test.ts"
        }
      ],
      "unlisted": true
    },
    "test:vscode-launch-config.test.ts": {
      "name": "test:vscode-launch-config.test.ts",
      "steps": [
        {
          "exec": "jest --passWithNoTests --all --updateSnapshot --no-coverage test/vscode-launch-config.test.ts"
        }
      ],
      "unlisted": true
    },
    "projen:upgrade": {
      "name": "projen:upgrade",
      "category": "30.maintain",
      "description": "upgrades projen to the latest version",
      "steps": [
        {
          "exec": "yarn upgrade -L projen"
        },
        {
          "exec": "CI=\"\" yarn projen"
        }
      ]
    },
    "watch": {
      "name": "watch",
      "category": "00.build",
      "description": "Watch & compile in the background",
      "steps": [
        {
          "exec": "jsii -w --silence-warnings=reserved-word --no-fix-peer-dependencies"
        }
      ]
    },
    "package": {
      "name": "package",
      "category": "20.release",
      "description": "Create an npm tarball",
      "steps": [
        {
          "exec": "jsii-pacmak"
        }
      ]
    },
    "eslint": {
      "name": "eslint",
      "category": "10.test",
      "description": "Runs eslint against the codebase",
      "steps": [
        {
          "exec": "eslint --ext .ts,.tsx --fix --no-error-on-unmatched-pattern src test .projenrc.js"
        }
      ]
    },
    "compat": {
      "name": "compat",
      "category": "20.release",
      "description": "Perform API compatibility check against latest version",
      "steps": [
        {
          "exec": "jsii-diff npm:$(node -p \"require('./package.json').name\") -k --ignore-file .compatignore || (echo \"\nUNEXPECTED BREAKING CHANGES: add keys such as 'removed:constructs.Node.of' to .compatignore to skip.\n\" && exit 1)"
        }
      ]
    },
    "docgen": {
      "name": "docgen",
      "category": "20.release",
      "description": "Generate API.md from .jsii manifest",
      "steps": [
        {
          "exec": "jsii-docgen"
        }
      ]
    },
    "readme-macros": {
      "name": "readme-macros",
      "steps": [
        {
          "exec": "mv README.md README.md.bak"
        },
        {
          "exec": "cat README.md.bak | markmac > README.md"
        },
        {
          "exec": "rm README.md.bak"
        }
      ]
    }
  },
  "env": {
    "PATH": "$(npx -c 'node -e \"console.log(process.env.PATH)\"')"
  },
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \"npx projen\"."
}